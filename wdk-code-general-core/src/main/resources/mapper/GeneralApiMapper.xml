<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wdk.general.core.storage.dao.GeneralApiMapper">
  <resultMap id="BaseResultMap" type="com.wdk.general.core.storage.entity.GeneralApi">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="path" jdbcType="VARCHAR" property="path" />
    <result column="args" jdbcType="VARCHAR" property="args" />
    <result column="vo" jdbcType="VARCHAR" property="vo" />
    <result column="froms" jdbcType="VARCHAR" property="froms" />
    <result column="wheres" jdbcType="VARCHAR" property="wheres" />
    <result column="orderbys" jdbcType="VARCHAR" property="orderbys" />
    <result column="limits" jdbcType="VARCHAR" property="limits" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, path, args, vo, froms, wheres, orderbys, limits, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.wdk.general.core.storage.entity.GeneralApiExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from general_api
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="offset != null and limit != null">
      limit ${offset}, ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from general_api
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from general_api
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.wdk.general.core.storage.entity.GeneralApiExample">
    delete from general_api
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.wdk.general.core.storage.entity.GeneralApi">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into general_api (path, args, vo, 
      froms, wheres, orderbys, 
      limits, create_time, update_time
      )
    values (#{path,jdbcType=VARCHAR}, #{args,jdbcType=VARCHAR}, #{vo,jdbcType=VARCHAR}, 
      #{froms,jdbcType=VARCHAR}, #{wheres,jdbcType=VARCHAR}, #{orderbys,jdbcType=VARCHAR}, 
      #{limits,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.wdk.general.core.storage.entity.GeneralApi">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into general_api
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="path != null">
        path,
      </if>
      <if test="args != null">
        args,
      </if>
      <if test="vo != null">
        vo,
      </if>
      <if test="froms != null">
        froms,
      </if>
      <if test="wheres != null">
        wheres,
      </if>
      <if test="orderbys != null">
        orderbys,
      </if>
      <if test="limits != null">
        limits,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="path != null">
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="args != null">
        #{args,jdbcType=VARCHAR},
      </if>
      <if test="vo != null">
        #{vo,jdbcType=VARCHAR},
      </if>
      <if test="froms != null">
        #{froms,jdbcType=VARCHAR},
      </if>
      <if test="wheres != null">
        #{wheres,jdbcType=VARCHAR},
      </if>
      <if test="orderbys != null">
        #{orderbys,jdbcType=VARCHAR},
      </if>
      <if test="limits != null">
        #{limits,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.wdk.general.core.storage.entity.GeneralApiExample" resultType="java.lang.Long">
    select count(*) from general_api
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update general_api
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.path != null">
        path = #{record.path,jdbcType=VARCHAR},
      </if>
      <if test="record.args != null">
        args = #{record.args,jdbcType=VARCHAR},
      </if>
      <if test="record.vo != null">
        vo = #{record.vo,jdbcType=VARCHAR},
      </if>
      <if test="record.froms != null">
        froms = #{record.froms,jdbcType=VARCHAR},
      </if>
      <if test="record.wheres != null">
        wheres = #{record.wheres,jdbcType=VARCHAR},
      </if>
      <if test="record.orderbys != null">
        orderbys = #{record.orderbys,jdbcType=VARCHAR},
      </if>
      <if test="record.limits != null">
        limits = #{record.limits,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateSql != null" >
        ${record.updateSql},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update general_api
    set id = #{record.id,jdbcType=INTEGER},
      path = #{record.path,jdbcType=VARCHAR},
      args = #{record.args,jdbcType=VARCHAR},
      vo = #{record.vo,jdbcType=VARCHAR},
      froms = #{record.froms,jdbcType=VARCHAR},
      wheres = #{record.wheres,jdbcType=VARCHAR},
      orderbys = #{record.orderbys,jdbcType=VARCHAR},
      limits = #{record.limits,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.wdk.general.core.storage.entity.GeneralApi">
    update general_api
    <set>
      <if test="path != null">
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="args != null">
        args = #{args,jdbcType=VARCHAR},
      </if>
      <if test="vo != null">
        vo = #{vo,jdbcType=VARCHAR},
      </if>
      <if test="froms != null">
        froms = #{froms,jdbcType=VARCHAR},
      </if>
      <if test="wheres != null">
        wheres = #{wheres,jdbcType=VARCHAR},
      </if>
      <if test="orderbys != null">
        orderbys = #{orderbys,jdbcType=VARCHAR},
      </if>
      <if test="limits != null">
        limits = #{limits,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wdk.general.core.storage.entity.GeneralApi">
    update general_api
    set path = #{path,jdbcType=VARCHAR},
      args = #{args,jdbcType=VARCHAR},
      vo = #{vo,jdbcType=VARCHAR},
      froms = #{froms,jdbcType=VARCHAR},
      wheres = #{wheres,jdbcType=VARCHAR},
      orderbys = #{orderbys,jdbcType=VARCHAR},
      limits = #{limits,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.wdk.general.core.storage.entity.GeneralApiExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from general_api
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="sumByExample" parameterType="com.wdk.general.core.storage.entity.GeneralApiExample" resultType="long" >
    select sum(${sumCol}) from general_api
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <insert id="batchInsert">
    <if test="items.get(0) != null">
            insert into general_api  (path, args, vo, 
        froms, wheres, orderbys, 
        limits, create_time, update_time
        )
      values
      <foreach collection="items" item="item" index="index" separator=",">
      (#{item.path,jdbcType=VARCHAR}, #{item.args,jdbcType=VARCHAR}, #{item.vo,jdbcType=VARCHAR}, 
        #{item.froms,jdbcType=VARCHAR}, #{item.wheres,jdbcType=VARCHAR}, #{item.orderbys,jdbcType=VARCHAR}, 
        #{item.limits,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}
        )
      </foreach>
    </if>
  </insert>
</mapper>